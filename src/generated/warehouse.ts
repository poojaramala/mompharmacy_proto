// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v6.32.1
// source: warehouse.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  type CallOptions,
  type ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  type Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";

export const protobufPackage = "warehouseData";

export interface warehouseRequest {
}

export interface warehouseResponse {
  warehouseId: string;
  warehouseName: string;
}

function createBasewarehouseRequest(): warehouseRequest {
  return {};
}

export const warehouseRequest: MessageFns<warehouseRequest> = {
  encode(_: warehouseRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): warehouseRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasewarehouseRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): warehouseRequest {
    return {};
  },

  toJSON(_: warehouseRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<warehouseRequest>, I>>(base?: I): warehouseRequest {
    return warehouseRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<warehouseRequest>, I>>(_: I): warehouseRequest {
    const message = createBasewarehouseRequest();
    return message;
  },
};

function createBasewarehouseResponse(): warehouseResponse {
  return { warehouseId: "", warehouseName: "" };
}

export const warehouseResponse: MessageFns<warehouseResponse> = {
  encode(message: warehouseResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.warehouseId !== "") {
      writer.uint32(10).string(message.warehouseId);
    }
    if (message.warehouseName !== "") {
      writer.uint32(18).string(message.warehouseName);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): warehouseResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasewarehouseResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.warehouseId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.warehouseName = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): warehouseResponse {
    return {
      warehouseId: isSet(object.warehouseId) ? globalThis.String(object.warehouseId) : "",
      warehouseName: isSet(object.warehouseName) ? globalThis.String(object.warehouseName) : "",
    };
  },

  toJSON(message: warehouseResponse): unknown {
    const obj: any = {};
    if (message.warehouseId !== "") {
      obj.warehouseId = message.warehouseId;
    }
    if (message.warehouseName !== "") {
      obj.warehouseName = message.warehouseName;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<warehouseResponse>, I>>(base?: I): warehouseResponse {
    return warehouseResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<warehouseResponse>, I>>(object: I): warehouseResponse {
    const message = createBasewarehouseResponse();
    message.warehouseId = object.warehouseId ?? "";
    message.warehouseName = object.warehouseName ?? "";
    return message;
  },
};

export type warehouseDataService = typeof warehouseDataService;
export const warehouseDataService = {
  warehouseDetails: {
    path: "/warehouseData.warehouseData/warehouseDetails",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: warehouseRequest): Buffer => Buffer.from(warehouseRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): warehouseRequest => warehouseRequest.decode(value),
    responseSerialize: (value: warehouseResponse): Buffer => Buffer.from(warehouseResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): warehouseResponse => warehouseResponse.decode(value),
  },
} as const;

export interface warehouseDataServer extends UntypedServiceImplementation {
  warehouseDetails: handleUnaryCall<warehouseRequest, warehouseResponse>;
}

export interface warehouseDataClient extends Client {
  warehouseDetails(
    request: warehouseRequest,
    callback: (error: ServiceError | null, response: warehouseResponse) => void,
  ): ClientUnaryCall;
  warehouseDetails(
    request: warehouseRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: warehouseResponse) => void,
  ): ClientUnaryCall;
  warehouseDetails(
    request: warehouseRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: warehouseResponse) => void,
  ): ClientUnaryCall;
}

export const warehouseDataClient = makeGenericClientConstructor(
  warehouseDataService,
  "warehouseData.warehouseData",
) as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): warehouseDataClient;
  service: typeof warehouseDataService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
