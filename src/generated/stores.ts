// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v6.32.1
// source: stores.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  type CallOptions,
  type ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  type Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";

export const protobufPackage = "storesData";

export interface StoreRequest {
  storeId: string;
}

export interface storeResponse {
  storeName: string;
}

function createBaseStoreRequest(): StoreRequest {
  return { storeId: "" };
}

export const StoreRequest: MessageFns<StoreRequest> = {
  encode(message: StoreRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.storeId !== "") {
      writer.uint32(10).string(message.storeId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StoreRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStoreRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.storeId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StoreRequest {
    return { storeId: isSet(object.storeId) ? globalThis.String(object.storeId) : "" };
  },

  toJSON(message: StoreRequest): unknown {
    const obj: any = {};
    if (message.storeId !== "") {
      obj.storeId = message.storeId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<StoreRequest>, I>>(base?: I): StoreRequest {
    return StoreRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<StoreRequest>, I>>(object: I): StoreRequest {
    const message = createBaseStoreRequest();
    message.storeId = object.storeId ?? "";
    return message;
  },
};

function createBasestoreResponse(): storeResponse {
  return { storeName: "" };
}

export const storeResponse: MessageFns<storeResponse> = {
  encode(message: storeResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.storeName !== "") {
      writer.uint32(10).string(message.storeName);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): storeResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasestoreResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.storeName = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): storeResponse {
    return { storeName: isSet(object.storeName) ? globalThis.String(object.storeName) : "" };
  },

  toJSON(message: storeResponse): unknown {
    const obj: any = {};
    if (message.storeName !== "") {
      obj.storeName = message.storeName;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<storeResponse>, I>>(base?: I): storeResponse {
    return storeResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<storeResponse>, I>>(object: I): storeResponse {
    const message = createBasestoreResponse();
    message.storeName = object.storeName ?? "";
    return message;
  },
};

export type storesDataService = typeof storesDataService;
export const storesDataService = {
  storeDetails: {
    path: "/storesData.storesData/storeDetails",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: StoreRequest): Buffer => Buffer.from(StoreRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): StoreRequest => StoreRequest.decode(value),
    responseSerialize: (value: storeResponse): Buffer => Buffer.from(storeResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): storeResponse => storeResponse.decode(value),
  },
} as const;

export interface storesDataServer extends UntypedServiceImplementation {
  storeDetails: handleUnaryCall<StoreRequest, storeResponse>;
}

export interface storesDataClient extends Client {
  storeDetails(
    request: StoreRequest,
    callback: (error: ServiceError | null, response: storeResponse) => void,
  ): ClientUnaryCall;
  storeDetails(
    request: StoreRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: storeResponse) => void,
  ): ClientUnaryCall;
  storeDetails(
    request: StoreRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: storeResponse) => void,
  ): ClientUnaryCall;
}

export const storesDataClient = makeGenericClientConstructor(storesDataService, "storesData.storesData") as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): storesDataClient;
  service: typeof storesDataService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
